module clang_fe;

tokenizer basic;
entry Module;

expr TypeRef {
  pattern Void { "unit" }
  pattern Member { %base = _ "::" %name = identifier }
  pattern Named { %name = identifier }
  pattern Template { %base = _ "<" %args = concat { TypeRef } ">" }
}

define FuncArg {
  %name = identifier ":" %type = TypeRef 
}

expr Expr {
  pattern Named { %name = identifier }
  pattern Dot { %base = _ "." %name = identifier }
  pattern ColonColon { %base = _ "::" %name = identifier }
  pattern Call { %base = _ "(" %args = comma_array(comma) { Expr } ")" }
}

production CompoundStmt: Stmt {
  pattern Compound { "{" %stmts = concat { Stmt } "}" }
}
production Stmt {
  pattern Return { "return" %expr = Expr ";" }
  pattern Discard { %expr = Expr ";" }
  
}

production Decl {
  pattern Alias { "alias" %name = identifier "=" %type = TypeRef ";" }
  pattern DebugPrint { "compiler_debug_print_decl" %type = TypeRef ";" }
  pattern Func { "func" %name = identifier
  "(" %args = comma_array(comma) { FuncArg} ")"
  "->" %ret_t = TypeRef %body = CompoundStmt }
}

define Module {
  %decls = concat { Decl }
}
