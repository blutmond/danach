module clang_fe;

type Decl = {
  Func = (name: Token, args: Array<FuncArg>, ret_t: TypeRef, body: Stmt);
  Alias = (name: Token, type: TypeRef);
  DebugPrint = (type: TypeRef);
};

type Stmt = {
  Compound = (stmts: Array<Stmt>);
  Discard = (expr: Expr);
  Return = (expr: Expr);
};

type FuncArg = (
  name: Token,
  type: TypeRef
);

type TypeRef = {
  Named = (name: Token);
  Template = (base: TypeRef, args: Array<TypeRef>);
  Member = (base: TypeRef, name: Token);
  Void = ();
};

type Expr = {
  Named = (name: Token);
  Index = (base: Expr, args: Array<Expr>);
  Dot = (base: Expr, name: Token);
  ColonColon = (base: Expr, name: Token);
  IntegerLiteral = (value: Token);
  StringLiteral = (value: Token);
  Call = (base: Expr, args: Array<Expr>);
  Void = ();
};

type Module = (
  decls: Array<Decl>
);

raw_func ParseLiteralExpr() -> Expr {
  if peak() == identifier {
    return new NamedExpr { name = expect(identifier); };
  } else if peak() == number {
    return new IntegerLiteralExpr { value = expect(number); };
  } else if peak() == str {
    return new StringLiteralExpr { value = expect(str); };
  } else {
    unexpected();
  }
}

raw_func ParseExpr() -> Expr {
  let expr: Expr = ParseLiteralExpr();
  loop {
    if peak() == open_paran {
      hackset expr = new CallExpr {
        base = expr;
        ignore expect(open_paran);
        args = comma_array(Expr, comma, close_paran) { return ParseExpr(); };
        ignore expect(close_paran);
      };
    } else if peak() == dot {
      hackset expr = new DotExpr {
        base = expr;
        ignore expect(dot);
        name = expect(identifier);
      };
    } else if peak() == coloncolon {
      hackset expr = new ColonColonExpr {
        base = expr;
        ignore expect(coloncolon);
        name = expect(identifier);
      };
    } else {
      return expr;
    }
  }
}

raw_func ParseStmt() -> Stmt {
  if peak() == "return" {
    return new ReturnStmt {
      ignore expect(identifier);
      expr = ParseExpr();
      ignore expect(semi);
    };
  } else {
    return new DiscardStmt {
      expr = ParseExpr();
      ignore expect(semi);
    };
  }
}

raw_func ParseCompoundStmt() -> Stmt {
  return new CompoundStmt {
    ignore expect(open_brace);
    stmts = concat_array(Stmt, close_brace) {
      return ParseStmt();
    };
    ignore expect(close_brace);
  };
}

raw_func ParseTypeRef() -> TypeRef {
  let result: TypeRef = new NamedTypeRef {
    name = expect(identifier);
  };
  loop {
    if peak() == open_arr {
      return new TemplateTypeRef {
        base = result;
        ignore expect(open_arr);
        args = comma_array(TypeRef, comma, close_arr) { return ParseTypeRef(); }; 
        ignore expect(close_arr);
      };
    } else if peak() == coloncolon {
      return new MemberTypeRef {
        base = result;
        ignore expect(coloncolon);
        name = expect(identifier);
      };
    } else {
      return result;
    }
  }
}

raw_func ParseFuncArg() -> FuncArg {
  return new FuncArg {
    name = expect(identifier);
    ignore expect(colon);
    type = ParseTypeRef();
  };
}

raw_func ParseDecl() -> Decl {
  if peak() == "func" {
    return new FuncDecl {
      ignore expect(identifier);
      name = expect(identifier);
      ignore expect(open_paran);
      args = comma_array(FuncArg, comma, close_paran) { return ParseFuncArg(); };
      ignore expect(close_paran);
      if peak() == arrow {
        ignore expect(arrow);
        ret_t = ParseTypeRef();
      } else {
        ret_t = new VoidTypeRef {};
      }
      body = ParseCompoundStmt();
    };
  } else if peak() == "alias" {
    ignore expect(identifier);
    return new AliasDecl {
      name = expect(identifier);
      ignore expect(equal);
      type = ParseTypeRef();
      ignore expect(semi);
    };
  } else if peak() == "compiler_debug_print_decl" {
    ignore expect(identifier);
    return new DebugPrintDecl {
      type = ParseTypeRef();
      ignore expect(semi);
    };
  }
  unexpected();
}

raw_func DoParse() -> Module {
  return new Module {
    decls = concat_array(Decl, eof) { return ParseDecl(); };
  };
}
