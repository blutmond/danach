module example;

expr TypeDeclExpr {
pattern Product {
  "(" %decls = comma_array(comma) {
    new TypeLetDecl { %name = identifier ":" %type = TypeDeclExpr}
  } ")" }
pattern Sum {
  "(" %decls = concat {
    new TypeLetDecl { %name = identifier "=" %type = TypeDeclExpr ";"}
  } ")" }
pattern Named { %name = identifier }
pattern Parametric { %base = _ "<" %params = concat { _ } ">" }
}

production CompoundStmt: Stmt {
pattern Compound { "{" %stmts = concat { Stmt } "}" }
}
production Stmt {
  pattern Let {
    "let" %name = identifier ":" %type = TypeDeclExpr "=" %expr = Expr ";" }
  pattern Ignore { "ignore" %expr = Expr }
}

production Decl {
pattern Type {"type" %name = identifier "=" %type = TypeDeclExpr ";" }
pattern RawFunc {"raw_func" %name = identifier "(" ")" "->" CompoundStmt }
}

define Module { "module" %decl_name = identifier ";"
  %decls = concat { Decl }
}
