inline_cpp("#include <string>");
inline_cpp("#include <cstring>");
inline_cpp("#include <spawn.h>");
inline_cpp("#include <experimental/string_view>");
inline_cpp("#include <iostream>");
inline_cpp("#include <vector>");
inline_cpp("#include <fstream>");
inline_cpp("#include <wait.h>");
inline_cpp("using std::experimental::string_view;");

inline_cpp("#include \"tokens/line_number_helper.cc\"");
inline_cpp("");
inline_cpp("#include \"gen/rules/tokenizer.cc\"");
inline_cpp("");
inline_cpp("#include \"gen/rules/parser.cc\"");

inline_cpp("template<typename T> using ptr = T*;");
inline_cpp("template<typename T> using const_value = const T;");
inline_cpp("template<typename T> using arr = T[];");

fn_expr not = "!" _;
fn_expr neg = "-" _;
fn_expr lt = _ "<" _;
fn_expr le = _ "<=" _;
fn_expr gt = _ ">" _;
fn_expr ge = _ ">=" _;
fn_expr eq = _ "==" _;
fn_expr ne = _ "!=" _;
fn_expr addr = "&" _;
fn_expr subscript = _ "[" _ "]";
fn_expr bitor = _ "|" _;

known_cpp_type string = "std::string";
known_cpp_type ifstream = "std::ifstream";
known_template ptr;
known_template const_value;
known_template arr;
known_cpp_type Token = "rule_spec::tok::Token";

raw_func read_file(fname: string) -> string {
  var in: ifstream(fname, bitor(inline_cpp("std::ios::in"), inline_cpp("std::ios::binary")));
  if (not(in)) {
    fprintf(stderr, "Could not read file: %s\n", fname.c_str());
    exit(255);
  }
  var contents: string;
  in.seekg(0, inline_cpp("std::ios::end"));
  contents.resize(in.tellg());
  in.seekg(0, inline_cpp("std::ios::beg"));
  in.read(addr(subscript(contents, 0)), contents.size());
  in.close();
  return contents;
}

inline_cpp("#include \"rules/rule_apply.cc\"");

raw_func main(argc: int, argv: ptr<ptr<char>>) -> int {
  if (le(argc, 1)) {
    fprintf(stderr, "For help: %s help\n", subscript(argv, 0));
    exit(255);
  }
  if (eq(inline_cpp("std::string")(subscript(argv, 1)), "build")) {
    printf("Building everything...\n");
    
    inline_cpp("using namespace rule_spec");
    var contents: string = read_file("rules.build");

    var tokens: Tokenizer(contents.c_str());
    var module: ptr<Module> = inline_cpp("parser::DoParse")(tokens);
    DoEvalAll(module);
  } else {
    fprintf(stderr, "Unknown command: %s\n", subscript(argv, 1));
    exit(255);
  }
}
