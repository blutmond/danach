module rule_spec;

entry Module;
tokenizer basic;

expr Expr {
  pattern Name { %name = identifier }
  pattern StringLiteral { %value = str }
  pattern IntegerLiteral { %value = number }
  pattern ArrayLiteral { "[" %values = comma_array(comma) { Expr } "]" }
  pattern Dot { %base = _ "." %name = identifier }
}

define Option {
  %key = identifier "=" %value = Expr ";"
}

production Decl {
  pattern Import {"import" %path = str "as" %name = identifier ";" }
  pattern ImportBuffer { "import" %id = number "of" %filename = str "as" %name = identifier ";" }
  pattern Let { "let" %name = identifier "=" %value = Expr ";" }
  pattern BufferParser { "buf_parser"  %name = identifier "{" %options = concat { Option } "}" }
  pattern BufferLoweringSpec { "buf_lowering_spec"  %name = identifier "{" %options = concat { Option } "}" }
  pattern OldParser {"old_parser" %name = identifier "{" %options = concat { Option } "}" }
  pattern OldLoweringSpec { "old_lowering_spec" %name = identifier "{" %options = concat { Option } "}" }
  pattern Library {"lib" %name = identifier "{" %options = concat { Option } "}" }
  pattern Passes {"passes" %name = identifier "{" %options = concat { Option } "}" }
  pattern PassesTemplate {"passes_meta" %name = identifier "{" %options = concat { Option } "}" }
  pattern Link { "link" %fname = str "{" %options = concat { Option } "}" }
  pattern SoLink { "solink" %fname = str "{" %options = concat { Option } "}" }
}

define Module {
  %decls = concat { Decl }
}
