module production_spec;

entry Module;
tokenizer basic;

expr TypeDeclExpr {
  pattern Product {
    "(" %decls = comma_array(comma) {
      new TypeLetDecl { %name = identifier ":" %type = TypeDeclExpr}
    } ")" }
  pattern Sum {
    "{" %decls = concat {
      new TypeLetDecl { %name = identifier "=" %type = TypeDeclExpr ";"}
    } "}" }
  pattern Named { %name = identifier }
  pattern Colon { %base = _ "::" %name = identifier }
  pattern Parametric { %base = _ "<" %params = concat { TypeDeclExpr } ">" }
}

production PatternExpr {
  pattern CommaConcat { "comma_array" "(" %comma = identifier ")"
    %element = CompoundPatternStmt }
  pattern Concat { "concat" %element = CompoundPatternStmt }
  pattern Self { "_" }
  pattern New { "new" %type = TypeDeclExpr
    %value = CompoundPatternStmt }
  pattern Pop { "pop" }
  pattern Named { %name = identifier }
}

production CompoundPatternStmt: PatternStmt {
  pattern Compound { "{" %items = concat { PatternStmt } "}" }
}
production PatternStmt {
  pattern String { %value = str }
  pattern Assign { "%" %name = identifier "=" %value = PatternExpr }
  pattern Push { "push" %value = PatternExpr }
  pattern Merge { "merge" "("
  %items = comma_array(comma) { PatternStmt } ")" }
  pattern ExprTailLoop { "expr_tail_loop" "(" %base = PatternExpr ")"
      ":" %type = TypeDeclExpr %value = CompoundPatternStmt }
  pattern Conditional { "try" %value = CompoundPatternStmt }
  pattern Wrap { %value = PatternExpr }
}

pattern DeclList { "{" concat { Decl } "}" }
production Decl {
  pattern Type {"type" %name = identifier "=" %type = TypeDeclExpr ";" }
  pattern Expr { "expr" %name = identifier %stmts = DeclList }
  pattern ProductionAndType {
    "production" %name = identifier ":" %type = TypeDeclExpr
    %stmts = DeclList }
  pattern Production {
    "production" %name = identifier %stmts = DeclList }
  pattern Pattern {
    "pattern" %name = identifier %value = CompoundPatternStmt }
  pattern LeftAssoc { "left" %stmts = DeclList }
  pattern RightAssoc { "right" %stmts = DeclList }
  pattern DefineWithType {
    "define"  %name = identifier ":" %type = TypeDeclExpr %value = CompoundPatternStmt }
  pattern Define {
    "define"  %name = identifier %value = CompoundPatternStmt }
  pattern Entry { "entry" %name = identifier ";" }
  pattern Tokenizer { "tokenizer" %name = identifier ";" }
}

define Module {
  "module" %mod_name = identifier ";"
  %decls = concat { Decl }
}
