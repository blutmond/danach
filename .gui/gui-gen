#0

#1
view "Metadata" {
  raw 1;
}

view "BUILD" {
  raw 2;
}

view "widgets_spec" {
  raw 3;
  raw 4;
}

view "example-widget" {
  raw 5;
}

view "other" {
  raw 6;
  func 7, 8;
}
#2
import "src/gui" as gui;

buf_parser widgets_spec {
  parser = 3;
  tokens = 4;
  gen_dir = ".generated/gen/widgets";
  cc_out = "widgets-spec.cc";
  h_out = "widgets-spec.h";
}

widget example_widget {
  spec = 5;
  gen_dir = ".generated/gen/widgets";
  cc_out = "example-widget.cc";
  h_out = "example-widget.h";
  deps = [gui.editor_widget];
}
#3
module widget_spec;

tokenizer basic;
entry Module;

production Decl {
  pattern Layout { "layout" %name = identifier }
  pattern Wrapper { "wrap" %name = identifier }
}

define Module {
  "module" %mod_name = identifier ";"
  %decls = concat { Decl }
}
#4
module unused;

regex basic {
  let digit = "0" : "9";
  let id = ("a" : "z") | "_" | ("A" : "Z");
  let all = (" " : "~");
  emit dot = ".";
  emit plus = "+";
  emit pipe = "|";
  emit star = "*";
  emit semi = ";";
  emit comma = ",";
  emit equal = "=";
  emit equalequal = "==";
  emit notequal = "!=";
  emit open_arr = "<";
  emit close_arr = ">";
  emit open_paran = "(";
  emit close_paran = ")";
  emit open_brace = "{";
  emit close_brace = "}";
  emit open_bracket = "[";
  emit close_bracket = "]";
  emit percent = "%";
  emit arrow = "->";
  emit colon = ":";
  emit coloncolon = "::";
  emit eof = 0;
  ignore "\n";
  ignore " ";
  emit identifier = id . (id | digit)*;
  emit str = "\"" . (("\\" . all) | (" " : "!") | ("#" : "[") | ("]" : "~"))* . "\"";
  ignore "//" . (all)* . "\n";
  emit number = digit+;
}
#5
module widget_example;

// wrap SillyStruct { events: [keypress, motion, mousepress, scroll]; }

// layout my_thing {
//  object_local var split = 400;
//  SillyStruct()(shape(0, 0, split, height));
//  SillyStruct()(shape(0, 0, width - split, height));
// }
#6
// Something or another here...
#7
inline void SillyLayoutExample_Layout(const SillyLayoutExample& s, gui::Shape shape,
                                      gui::Rectangle& rect1,
                                      gui::Rectangle& rect2,
                                      gui::Rectangle& rect3 //,
                                      //gui::Rectangle& rect4,
                                      //gui::Rectangle& rect5
                                      )
#8
gui::DoHSplit(ConvertRectangle(shape), rect1, rect2, 300);
gui::DoVSplit(rect2, rect2, rect3, -int(gui::DefaultFont()->height() + 4));
