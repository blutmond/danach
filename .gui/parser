#0

#1
view "Metadata" {
  raw 0;
  raw 1;
}

view "BUILD" {
  raw 2;
}

view "lowering-spec" {
  raw 3;
  raw 4;
}
#2
buf_parser lowering_spec {
  parser = 3;
  tokens = 4;
  gen_dir = ".generated/gen/parser";
  cc_out = "lowering_spec.cc";
  h_out = "lowering_spec.h";
}
#3
module lowering_spec;

tokenizer basic;
entry Module;

expr TypeRef {
  pattern Void { "unit" }
  pattern Member { %base = _ "::" %name = identifier }
  pattern Named { %name = identifier }
  pattern Template { %base = _ "<" %args = concat { TypeRef } ">" }
}

expr Expr {
  pattern New { "new" %type = TypeRef %body = CompoundStmt }
  pattern Number { %value = number }
  pattern Str { %value = str }
  pattern Dot { %base = _ "." %name = identifier }
  pattern Arrow { %base = _ "->" %name = identifier }
  pattern Named { %name = identifier }
  pattern Index { %base = _ "[" %args = comma_array(comma) { Expr } "]" }
  pattern ColonColon { %base = _ "::" %name = identifier }
  pattern Call { %base = _ "(" %args = comma_array(comma) { Expr } ")" }
  left {
    pattern CompEqEq { %lhs = _ "==" %rhs = _ }
  }
  right {
    pattern Assign { %lhs = _ "=" %rhs = _ }
  }
}

production CompoundStmt: Stmt {
  pattern Compound { "{" %stmts = concat { Stmt } "}" }
}

production Stmt {
  pattern ReturnVoid { "return" ";" }
  pattern Return { "return" %expr = Expr ";" }
  pattern Let { "let" %name = identifier "=" %expr = Expr ";" }
  pattern Var { "var" %name = identifier ":" %type = TypeRef ";" }
  pattern OpenWithType { "open" %name = identifier ":" %type = TypeRef %body = CompoundStmt }
  pattern Open { "open" %name = identifier %body = CompoundStmt }
  pattern Case { "case" "." %name = identifier ":" }
  pattern For { "for" %name = identifier "in" %sequence = Expr %body = CompoundStmt }
  pattern Loop { "loop" %body = CompoundStmt }
  pattern IfElse { "if" "(" %cond = Expr ")" %body = CompoundStmt "else" %else_body = CompoundStmt }
  pattern If { "if" "(" %cond = Expr ")" %body = CompoundStmt }
  pattern Scope { "scope" %name = identifier "=" %expr = Expr %body = CompoundStmt }
  pattern Default { "default" ":" }
  pattern Emitter { "emit" %body = CompoundStmt }
  pattern DbgEmitter { "dbg_emit" %body = CompoundStmt }
  pattern Break { "break" ";" }
  pattern Discard { %expr = Expr ";" }
}

define FuncArg {
  %name = identifier ":" %type = TypeRef 
}

production Decl {
  pattern Context { "context" %name = identifier ":" %type = TypeRef ";" }
  pattern Func { "func" %name = identifier
  "(" %args = comma_array(comma) { FuncArg} ")"
  "->" %ret_t = TypeRef %body = CompoundStmt }
}

define Module {
  "module" %mod_name = identifier ";"
  %decls = concat { Decl }
}
#4
module unused;

regex basic {
  let digit = "0" : "9";
  let id = ("a" : "z") | "_" | ("A" : "Z");
  let all = (" " : "~");
  emit dot = ".";
  emit plus = "+";
  emit pipe = "|";
  emit star = "*";
  emit semi = ";";
  emit comma = ",";
  emit equal = "=";
  emit equalequal = "==";
  emit notequal = "!=";
  emit open_arr = "<";
  emit close_arr = ">";
  emit open_paran = "(";
  emit close_paran = ")";
  emit open_brace = "{";
  emit close_brace = "}";
  emit open_bracket = "[";
  emit close_bracket = "]";
  emit percent = "%";
  emit arrow = "->";
  emit colon = ":";
  emit coloncolon = "::";
  emit eof = 0;
  ignore "\n";
  ignore " ";
  emit identifier = id . (id | digit)*;
  emit str = "\"" . (("\\" . all) | (" " : "!") | ("#" : "[") | ("]" : "~"))* . "\"";
  emit number = digit+;
}
